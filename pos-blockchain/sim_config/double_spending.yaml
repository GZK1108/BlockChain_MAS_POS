# 真正的双花攻击配置 - 强制分叉竞争版本
# 确保分叉B在 node1 加入前就比分叉A更长

python_bin: python3
working_dir: .
log_level: DEBUG
log_file: double_spending.log

server:
  cmd: "{python} aserver_detect.py"

nodes:
  node1: { cmd: "{python} node.py --node node1" }
  node2: { cmd: "{python} node.py --node node2" }
  node3: { cmd: "{python} node.py --node node3" }

post_wait: 10
node_exit_wait: 5

timeline:
  # === 阶段1：初始化 ===
  - at: 0
    target: server
    run: "stop"

  # 设置检测阈值
  - at: 1s
    target: server
    run: "threshold 0.5"

  # === 阶段2：质押建立验证者 ===
  - at: 2s
    target: node1
    run: "stake 20"

  - at: 3s
    target: node2
    run: "stake 15"

  - at: 4s
    target: node3
    run: "stake 15"

  # 确保质押生效，所有节点同步
  - at: 5s
    target: server
    run: "step"

  # 检查初始状态
  - at: 6s
    target: [node1, node2, node3]
    run: "wallet"

  # === 阶段3：同时创建网络分区 ===
  # 关键：同时隔离所有节点，防止任何同步
  - at: 8s
    target: server
    run: "drop node3 on"

  # === 阶段4：并行构建两个分叉 ===
  
  # node1 向 node2 转账（分叉A的双花交易）
  - at: 9s
    target: node1
    run: "tx node2 30"

  - at: 10s
    target: node1
    run: "forge --force"

  # === 阶段5：快速构建更长的分叉B ===
  # 立即隔离 node1，让 node3 开始独立构建更长的链
  - at: 11s
    target: server
    run: [ "drop node1 on", "drop node2 on", "drop node3 off"]

  # node3 快速构建多个区块，确保分叉B更长
  - at: 12s
    target: node3
    run: "tx node1 1" 

  - at: 13s
    target: node3
    run: "forge --force" 

  - at: 14s
    target: node3
    run: "tx node1 1"
  
  - at: 15s
    target: node3
    run: "forge --force"  

  # 现在 node1 在分叉B上向 node3 转账（双花）
  - at: 16s
    target: node1
    run: "tx node3 30"

  - at: 17s
    target: node3
    run: "forge --force"  
  

  # === 阶段6：node1 连接到更长的分叉B ===
  # node1 连接 node3，会选择更长的分叉B
  - at: 18s
    target: server
    run: "drop node1 off"

  # node1 同步到分叉B（更长的链）
  - at: 19s
    target: node1
    run: "sync"

  # 验证 node1 切换到分叉B
  - at: 20s
    target: node1
    run: "chain"

  # === 阶段7：检测双花攻击 ===
  - at: 22s
    target: server
    run: "detect"

  - at: 23s
    target: server
    run: "attacks"

  # === 阶段8：恢复网络验证结果 ===
  # 连接所有节点，看最终结果
  - at: 24s
    target: server
    run: "drop node2 off"

  # 强制同步
  - at: 25s
    target: [node1, node2, node3]
    run: "sync"

  # === 阶段9：验证双花成功 ===
  - at: 26s
    target: server
    run: ["detect", "attacks"]

  - at: 27s
    target: [node1, node2, node3]
    run: "info"
